#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 7.6
#  in conjunction with Tcl version 8.6
#    Feb 28, 2023 11:07:08 AM IST  platform: Linux

import sys
from tkinter import ttk

import UDP.UDPclient
from UDP.synagogue import Synagogue
from UI.ScrolledListBox import ScrolledListBox

_debug = True  # False to eliminate debug printing from callback functions.

_bgcolor = '#778899'  # X11 color: '{light slate gray}'
_fgcolor = '#f6f7f9'  # Closest X11 color: 'gray97'
_compcolor = '#f9f8f7'  # Closest X11 color: 'gray97'
_ana1color = '#f7f7f9'  # Closest X11 color: 'gray97'
_ana2color = 'beige'  # X11 color: #f5f5dc
_tabfg1 = 'black'
_tabfg2 = 'black'
_tabbg1 = 'grey75'
_tabbg2 = 'grey89'
_bgmode = 'light'

_style_code_ran = 0


def _style_code():
    global _style_code_ran
    if _style_code_ran:
        return
    style = ttk.Style()
    if sys.platform == "win32":
        style.theme_use('winnative')
    style.configure('.', background=_bgcolor)
    style.configure('.', foreground=_fgcolor)
    style.configure('.', font='TkDefaultFont')
    style.map('.', background=
    [('selected', _compcolor), ('active', _ana2color)])
    if _bgmode == 'dark':
        style.map('.', foreground=
        [('selected', 'white'), ('active', 'white')])
    else:
        style.map('.', foreground=
        [('selected', 'black'), ('active', 'black')])
    style.configure('Vertical.TScrollbar', background=_bgcolor,
                    arrowcolor=_fgcolor)
    style.configure('Horizontal.TScrollbar', background=_bgcolor, arrowcolor=_fgcolor)
    _style_code_ran = 1


def goto(controller, to):
    controller.show_frame(to)


def connect(controller):
    goto(controller, "LoginPage")


def login_guest(controller):
    goto(controller, "MainPage")


def login_gabai(controller, mID, mPassword):
    print("id: " + mID + "\npassword: " + mPassword)
    goto(controller, "MainPage")
    controller.gabai = mPassword


def goto_manage_gabai(controller):
    print("password: " + controller.gabai)
    if controller.gabai != "-1":
        print("[!] not have premssion")
        return
    goto(controller, "ManageSyngPage")
    goto(controller, "ManageGabaiPage")


def goto_manage_syng(controller):
    print("password: " + controller.gabai)
    if controller.gabai == "0":
        print("[!] not have premssion")
        return
    goto(controller, "ManageSyngPage")


def send_query(name, nosah, city, Scrolledlistbox_query: ScrolledListBox):
    Scrolledlistbox_query.delete(0)
    print("name: " + name + "\nnosah: " + str(nosah.value) + "\ncity: " + str(city))
    ans = UDP.UDPclient.send_by_query(('127.0.0.1', 6666), name, nosah.value, city.value)
    if ans is None:
        print("[!] dosent have much")
        return
    for iteam in ans:
        ad = Synagogue.fromJSON(iteam)
        Scrolledlistbox_query.insert(0, ad.name)


def add_syng(*args):
    if _debug:
        print('proj_support.add_syng')
        for arg in args:
            print('    another arg:', arg)
        sys.stdout.flush()


def del_syng(*args):
    if _debug:
        print('proj_support.del_syng')
        for arg in args:
            print('    another arg:', arg)
        sys.stdout.flush()


def edit_syng(*args):
    if _debug:
        print('proj_support.edit_syng')
        for arg in args:
            print('    another arg:', arg)
        sys.stdout.flush()


def get_gabai(*args):
    if _debug:
        print('proj_support.get_gabai')
        for arg in args:
            print('    another arg:', arg)
        sys.stdout.flush()


def save_syng(*args):
    if _debug:
        print('proj_support.save_syng')
        for arg in args:
            print('    another arg:', arg)
        sys.stdout.flush()

# if __name__ == '__main__':
#     proj.start_up()
